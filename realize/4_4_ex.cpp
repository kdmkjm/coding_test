/*
* 게임 개발
* 맵 ( N * M ) 의 직사각형 내를 게임 캐릭터가 움직이는 시스템을 개발 중이다.
* 이동 룰은 하기로 한다.
* 1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향부터 차례대로 갈 곳을 정한다.
* 2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전 후 한칸을 전진한다.
*		왼쪽에 가보지 않은 칸이 없다면 회전만하고 1단계로 돌아간다.
* 3. 만약 네 방향이 모두 가본 칸이거나 바다인 경우, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌아간다. 단, 뒤쪽 방향이 바다이면 움직임을 멈춘다.
* 
* 룰에 따라 캐릭터를 이동시킨 후에, 캐릭터가 방문한 칸의 수를 출력하는 프로그램을 작성하여라.
* 
* 입력 조건
* 첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 공백으로 구분하여 입력한다.
* 둘째 줄에 게임 캐릭터가 있는 칸의 좌표 ( A, B )와 바라보는 방향 d가 각각 서로 공백으로 구분하여 주어진다. (방향 d 0(북쪽), 1(동쪽), 2(님쪽), 3(서쪽) )
* 셋째 줄부터 육지인지 바다인지 정보가 주어진다.(0(육지), 1(바다))
* 
* 예시
5 5
1 1 0
1 1 1 1 1 
1 0 0 0 1
1 1 0 1 1
1 0 0 0 1
1 1 1 1 1
* 
* 3
*/
#include <iostream>
using namespace std;

int n, m, x, y, direction;
// 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화
int d[50][50];
// 전체 맵 정보
int arr[50][50];

// 북, 동, 남, 서 방향 정의
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

// 왼쪽으로 회전
void turn_left() {
    direction -= 1;
    if (direction == -1) direction = 3;
}

int main(void) {
    // N, M을 공백을 기준으로 구분하여 입력받기
    cin >> n >> m;
    // 현재 캐릭터의 X 좌표, Y 좌표, 방향을 입력받기
    cin >> x >> y >> direction;
    d[x][y] = 1; // 현재 좌표 방문 처리

    // 전체 맵 정보를 입력 받기
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int x;
            cin >> x;
            arr[i][j] = x;
        }
    }

    // 시뮬레이션 시작
    int cnt = 1;
    int turn_time = 0;
    while (true) {
        // 왼쪽으로 회전
        turn_left();
        int nx = x + dx[direction];
        int ny = y + dy[direction];
        // 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
        if (d[nx][ny] == 0 && arr[nx][ny] == 0) {
            d[nx][ny] = 1;
            x = nx;
            y = ny;
            cnt += 1;
            turn_time = 0;
            continue;
        }
        // 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
        else turn_time += 1;
        // 네 방향 모두 갈 수 없는 경우
        if (turn_time == 4) {
            nx = x - dx[direction];
            ny = y - dy[direction];
            // 뒤로 갈 수 있다면 이동하기
            if (arr[nx][ny] == 0) {
                x = nx;
                y = ny;
            }
            // 뒤가 바다로 막혀있는 경우
            else break;
            turn_time = 0;
        }
    }

    cout << cnt << '\n';
}