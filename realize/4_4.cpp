/*
* 게임 개발
* 맵 ( N * M ) 의 직사각형 내를 게임 캐릭터가 움직이는 시스템을 개발 중이다.
* 이동 룰은 하기로 한다.
* 1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향부터 차례대로 갈 곳을 정한다.
* 2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전 후 한칸을 전진한다.
*		왼쪽에 가보지 않은 칸이 없다면 회전만하고 1단계로 돌아간다.
* 3. 만약 네 방향이 모두 가본 칸이거나 바다인 경우, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌아간다. 단, 뒤쪽 방향이 바다이면 움직임을 멈춘다.
* 
* 룰에 따라 캐릭터를 이동시킨 후에, 캐릭터가 방문한 칸의 수를 출력하는 프로그램을 작성하여라.
* 
* 입력 조건
* 첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 공백으로 구분하여 입력한다.
* 둘째 줄에 게임 캐릭터가 있는 칸의 좌표 ( A, B )와 바라보는 방향 d가 각각 서로 공백으로 구분하여 주어진다. (방향 d 0(북쪽), 1(동쪽), 2(님쪽), 3(서쪽) )
* 셋째 줄부터 육지인지 바다인지 정보가 주어진다.(0(육지), 1(바다))
* 
* 예시
5 5
1 1 0
1 1 1 1 1 
1 0 0 0 1
1 0 0 0 1
1 0 0 0 1
1 1 1 1 1
* 
* 3
*/
#include <iostream>
using namespace std;

int n = 0, m = 0, x = 0, y = 0, dir = 0, cnt = 0;
int mat[50][50];
int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int main()
{
	cin >> n >> m;
	cin >> x >> y >> dir;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> mat[i][j];
		}
	}

	// 시물레이션 시작
	int cnt = 1;
	mat[x][y] = 2;
	int turn_cnt = 0;

	while (true)
	{
		// 룰1: 왼쪽으로 회전
		dir--;
		if (dir == -1)
		{
			dir = 3;
		}

		// 회전 후 이동 시 칸이 가보지 않은 칸이라면
		// mat[x][y] 0(안가본칸) 1(바다) 2(가본칸)
		if (mat[x + dx[dir]][y + dy[dir]] == 0)
		{
			// 이동 후 해당 칸을 2로 변경
			x += dx[dir];
			y += dy[dir];
			mat[x][y] = 2;
			cnt++;
			turn_cnt = 0;
			continue;
		}
		// 가본 칸이거나 바다라면 회전
		else
		{
			turn_cnt++;
		}

		// 네 방향 다 가본 칸이나 바다라면(turn_cnt 가 4인 경우 네방향에서 안가본 곳은 존재하지 않는다)
		if (turn_cnt == 4)
		{
			// 뒤로 한칸(무조건 2)
			if (mat[x - dx[dir]][y - dy[dir]] == 2)
			{
				x -= dx[dir];
				y -= dy[dir];
				turn_cnt = 0;
			}
			// 바다라면
			else
			{
				break;
			}
		}
	}
	
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cout << mat[i][j] << " ";
		}
		cout << '\n';
	}
	cout << cnt << '\n';
}